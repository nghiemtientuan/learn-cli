import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by @pongsatt/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  products: GQLProduct[];
  product?: GQLProduct;
}

export interface GQLProduct {
  id: string;
  name: string;
  text?: string;
  createdAt?: GQLDate;
  updatedAt?: GQLDate;
}

export type GQLDate = any;

export interface GQLMutation {
  addProduct: GQLProduct;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Product?: GQLProductTypeResolver;
  Date?: GraphQLScalarType;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  products?: QueryToProductsResolver<TParent>;
  product?: QueryToProductResolver<TParent>;
}

export interface QueryToProductsResolver<TParent = any, TResult = Array<GQLProduct>|Promise<Array<GQLProduct>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToProductArgs {
  id: string;
}
export interface QueryToProductResolver<TParent = any, TResult = GQLProduct|Promise<GQLProduct>> {
  (parent: TParent, args: QueryToProductArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductTypeResolver<TParent = any> {
  id?: ProductToIdResolver<TParent>;
  name?: ProductToNameResolver<TParent>;
  text?: ProductToTextResolver<TParent>;
  createdAt?: ProductToCreatedAtResolver<TParent>;
  updatedAt?: ProductToUpdatedAtResolver<TParent>;
}

export interface ProductToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToNameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToTextResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToCreatedAtResolver<TParent = any, TResult = GQLDate|Promise<GQLDate>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductToUpdatedAtResolver<TParent = any, TResult = GQLDate|Promise<GQLDate>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  addProduct?: MutationToAddProductResolver<TParent>;
}

export interface MutationToAddProductArgs {
  name: string;
  text?: string;
}
export interface MutationToAddProductResolver<TParent = any, TResult = GQLProduct|Promise<GQLProduct>> {
  (parent: TParent, args: MutationToAddProductArgs, context: any, info: GraphQLResolveInfo): TResult;
}
